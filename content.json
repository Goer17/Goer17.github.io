{"meta":{"title":"Yuanyang Lee 的个人博客","subtitle":"","description":"","author":"Captain_Lee","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2023-02-08T17:20:04.000Z","updated":"2023-02-08T17:21:01.238Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-02-08T17:23:44.000Z","updated":"2023-02-08T17:24:02.300Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"标题","date":"2023-02-08T16:22:53.592Z","updated":"2023-02-08T16:22:53.588Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"React 脚手架配置代理的方法","slug":"React 脚手架配置代理的方法","date":"2023-02-07T14:42:07.000Z","updated":"2023-02-08T17:22:52.385Z","comments":true,"path":"2023/02/07/React 脚手架配置代理的方法/","link":"","permalink":"http://example.com/2023/02/07/React%20%E8%84%9A%E6%89%8B%E6%9E%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"","text":"方法一：直接在 package.json 中追加配置例如，当前服务器端口为 3000，若要向端口 5000 的服务器发送请求，我们可以在 package.json 中添加如下配置： 1&quot;proxy&quot;: &quot;http://localhost:5000&quot; 此后，当请求了 3000 端口不存在的资源时，那么请求就会转发给 5000 端口。 示例： 例如一个 create-react-app 创建项目在 3001 端口运行，我们使用 json-server 模拟了一个 3000 端口的服务器，其中 JSON 数据如下： 1234567&#123; &quot;students&quot;: [ &#123;&quot;id&quot;: &quot;0001&quot;, &quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 18&#125;, &#123;&quot;id&quot;: &quot;0002&quot;, &quot;name&quot;: &quot;Jack&quot;, &quot;age&quot;: 19&#125;, &#123;&quot;id&quot;: &quot;0003&quot;, &quot;name&quot;: &quot;Frank&quot;, &quot;age&quot;: 20&#125; ]&#125; students 数据的 URL 为 http://localhost:3000/students，若我们要向 3001 端口发送 GET 请求来获取 students 的 JSON 数据，则可以在 package.json 中添加配置： 1&quot;proxy&quot;: &quot;http://localhost:3000&quot; 获取 3001 端口有的资源： 12345678910111213141516171819202122export default class App extends Component &#123; getInfo = () =&gt; &#123; axios.get(&quot;http://localhost:3001/index.html&quot;).then( response =&gt; &#123; console.log(response.data); &#125;, err =&gt; &#123; console.log(err); &#125; ); &#125; render() &#123; return ( &lt;div&gt; &lt;button onClick=&#123;this.getInfo&#125;&gt;点击发送请求获取数据&lt;/button&gt; &lt;/div&gt; ) &#125;&#125; 此时控制台输出当前项目下的 index.html 文件： 获取 3001 端口没有而 3000 端口有的资源： 12345678910111213141516171819202122export default class App extends Component &#123; getInfo = () =&gt; &#123; axios.get(&quot;http://localhost:3001/students&quot;).then( response =&gt; &#123; console.log(response.data); &#125;, err =&gt; &#123; console.log(err); &#125; ); &#125; render() &#123; return ( &lt;div&gt; &lt;button onClick=&#123;this.getInfo&#125;&gt;点击发送请求获取数据&lt;/button&gt; &lt;/div&gt; ) &#125;&#125; 此时控制台输出 3000 端口下的 students 数据： 若获取的资源 3001 端口和 3000 端口都没有，则控制台会报错。 方法一优缺点： 优点：配置简单，前端请求资源时可以不加任何前缀 缺点：不能配置多个代理 方法二：创建 setupProxy.js 文件 首先在 src 目录下创建 setupProxy.js 文件 编写 setupProxy.js 配置具体代码规范： 12345678910111213141516171819202122232425262728// 配置端口 8000 和端口 5001 的服务器代理// setupProxy.jsconst &#123; createProxyMiddleware &#125; = require(&#x27;http-proxy-middleware&#x27;);// 引入内置模块: HTTP 代理中间件module.exports = function(app) &#123; // app 为服务对象 app.use( createProxyMiddleware(&#x27;/api1&#x27;, &#123; // 遇见 /api1 前缀的请求，就会触发该代理 target: &#x27;http://localhost:8000&#x27;, // 请求转发的端口地址 changeOrigin: true, // 控制服务器收到响应头中 Host 字段的值 pathRewrite: &#123; &#x27;^/api1&#x27;: &#x27;&#x27; // 去除请求前缀，保证交给后台服务器的是正常请求地址 &#125; &#125;) ); app.use( createProxyMiddleware(&#x27;/api2&#x27;, &#123; target: &#x27;http://localhost:5001&#x27;, changeOrigin: true, pathRewrite: &#123; &#x27;^/api2&#x27;: &#x27;&#x27; &#125; &#125;) );&#125; http-proxy-middleware 1.x 版本后配置代理使用： 1const &#123; createProxyMiddleware &#125; = require(&#x27;http-proxy-middleware&#x27;); 此前使用： 1const proxy = require(&#x27;http-proxy-middleware&#x27;); 向不同端口发送请求的方法： 如果要向 8000 端口发送请求，例如： 123axios.get(&#x27;http://localhost:3000/api1/teachers&#x27;).then( // ...); 如果要向 5001 端口发送请求，同理： 123axios.get(&#x27;http://localhost:3000/api2/students&#x27;).then( // ...); 方法二优缺点： 优点：可以配置多个代理，可以更加灵活地控制是否走代理请求 缺点：配置繁琐，前端发送代理请求时必须加前缀","categories":[{"name":"前端","slug":"前端","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"React","slug":"React","permalink":"http://example.com/tags/React/"}]}],"categories":[{"name":"前端","slug":"前端","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"React","slug":"React","permalink":"http://example.com/tags/React/"}]}