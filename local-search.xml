<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记忆化 DFS</title>
    <link href="/2023/02/26/%E8%AE%B0%E5%BF%86%E5%8C%96%20DFS/"/>
    <url>/2023/02/26/%E8%AE%B0%E5%BF%86%E5%8C%96%20DFS/</url>
    
    <content type="html"><![CDATA[<h4 id="引入">引入</h4><p>记忆化DFS，顾名思义，就是<strong>带有记忆的深度优先搜索</strong>。</p><p>总所周知，用程序实现 Fibonacci 数列求值有两种常见方式：</p><ul><li><p>通过迭代即非递归的方式：</p><p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> pre = <span class="hljs-number">1</span>, next = <span class="hljs-number">1</span>, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n-- &gt; <span class="hljs-number">2</span>) &#123;<br>        sum = pre + next;<br>        pre = next;<br>        next = sum;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>通过递归方式：</p><p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Fibonacci</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">Fibonacci</span>(n - <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p></li></ul><p>上述两种方式各有优缺点，迭代方式效率更高，但是写起来比较麻烦；递归方式运行效率低，但是代码实现容易。</p><p><em>有没有一种方式可以结合两者的优点呢？</em></p><p>对于第二种递归方式，其主要的时间开销在于计算了许多重复内容，我们是否可以使用一个数组来维护已经计算过的值呢？</p><p>答案是显然的，于是我们就有了 —— <strong>记忆化 DFS</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> fib[MAX_NUM]; <span class="hljs-comment">// 记忆数组</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (fib[n]) &#123;<br>        <span class="hljs-keyword">return</span> fib[n]; <span class="hljs-comment">// 已经计算过的值直接返回</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) &#123;<br>        fib[n] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        fib[n] = <span class="hljs-built_in">Fibonacci</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">Fibonacci</span>(n - <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> fib[n];<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码以递归的方式实现，但是时间复杂度可以降到线性，和迭代形式一样，不同的地方在于我们需要额外的空间开销来记录已经计算过的值。</p><p>可能有同学就有疑问了：</p><p><em>上述例子很容易用 DP 来实现，为什么还需要记忆化 DFS 呢？</em></p><p>接下来我们将给出一个实际例子加以说明。</p><h4 id="实例分析">实例分析</h4><blockquote><p>猫和老鼠</p><p>Problem Description 有个小老鼠在校园里收藏了一些它最爱吃的奶酪。校园可以看成一个长度为n的正方形网格，每个网格可以标记为 (p, q) ，其中，0&lt;= p , q &lt; n。每个网格都有一个洞，里面储存了 k（0 &lt;= k &lt;=100）块奶酪。</p><p>现在，小老鼠准备享用这些美味啦。</p><p>开始的时候，他在 (0, 0)这个位置，每到一个地方，它都会吃光这个地方的奶酪，然后沿着水平或者垂直的方向到达另外一个地方。麻烦的是，有个很凶的猫总是在它的洞口附近，所以他每次最多移动k个位置，否则就会被这只猫吃掉。更糟糕的是，每在一个地方吃过奶酪，小老鼠都会变胖，所以，为了获得足够下一次逃跑的能量，它每次只能去比当前位置的奶酪更多的格子。现在已知 n 和 k，以及在每个网格的洞中小老鼠储存的奶酪的数量，请计算小老鼠在无法移动之前，一共最多能吃到多少块奶酪。</p><p>Input 题目包含多组测试数据。</p><p>每组测试数据组成如下： 首先一行包含2个不超过100的正整数 n 和 k ;接下来 n 行，每行包含n个数： 第一行 n 个数分别表示 (0, 0), (0, 1), … (0,n - 1) 这些位置储存的奶酪数量； 第二行 n 个数分别表示 (1, 0), (1, 1), …(1, n - 1) 这些位置储存的奶酪数量； 以此类推...</p><p>输入数据以两个 -1 结束。</p><p>Output 请输出小老鼠最多 能够吃到的奶酪数量，每组数据输出一行。</p><p>输入案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs input">3 1<br>1 2 5<br>10 11 6<br>12 12 7<br>-1 -1<br></code></pre></td></tr></table></figure><p>输出案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs output">37<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析</strong>：</p><p>根据题意，我们假设从 <span class="math inline">\((x, y)\)</span>出发的老鼠可以吃到的最大奶酪数量为 <span class="math inline">\(ans(x,y)\)</span>，<span class="math inline">\((x, y)\)</span> 处的芝士储量为<span class="math inline">\(cheese(x, y)\)</span>，老鼠可以从 <spanclass="math inline">\((x, y)\)</span> 出发在一次 <spanclass="math inline">\(k\)</span> 步以内的移动中到达的坐标的集合为 <spanclass="math inline">\(S = \{(x_1, y_1), (x_2, y_2), (x_3, y_3),...\}\)</span>，不难得出状态转移方程： <span class="math display">\[ans(x, y) = max_{(x_n, y_n) \in S} ans(x_n, y_n) \ + \ cheese(x, y)\]</span>如果直接用动态规划求解，这个问题的代码恐怕会相当复杂，因为我们难以确定DP 的起点，而且该转移方程较为复杂，更是加大了其难度。</p><p>于是我们便考虑到可以使用记忆化DFS，既保证了效率，又降低了编码难度。</p><p><strong>代码</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_LENG 105</span><br><br><span class="hljs-type">int</span> cheese[MAX_LENG][MAX_LENG];<br><span class="hljs-type">int</span> ans[MAX_LENG][MAX_LENG]; <span class="hljs-comment">// 储存结果，初始化为 -1</span><br><br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">const</span> vector&lt;array&lt;<span class="hljs-type">int</span>, 2&gt;&gt; dirs = &#123;<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;,<br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;,<br>    &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;,<br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;<br>&#125;; <span class="hljs-comment">// 运动方向</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-comment">// 记忆化 DFS</span><br>    <span class="hljs-comment">// 返回以 (x, y) 为起点可以吃到最多的奶酪</span><br>    <span class="hljs-keyword">if</span> (ans[x][y] &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 已经计算过的值</span><br>        <span class="hljs-keyword">return</span> ans[x][y];<br>    &#125;<br>    ans[x][y] = cheese[x][y];<br>    <span class="hljs-type">int</span> plusCheese = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; dir :dirs) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s = <span class="hljs-number">1</span>; s &lt;= k; s++) &#123;<br>            <span class="hljs-type">int</span> nx = x + s * dir[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> ny = y + s * dir[<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (nx &gt;= <span class="hljs-number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class="hljs-number">0</span> &amp;&amp; ny &lt; n &amp;&amp; cheese[nx][ny] &gt; cheese[x][y]) &#123;<br>                plusCheese = <span class="hljs-built_in">max</span>(plusCheese, <span class="hljs-built_in">dfs</span>(nx, ny));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    ans[x][y] += plusCheese;<br>    <span class="hljs-keyword">return</span> ans[x][y];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &gt;&gt; k, n != <span class="hljs-number">-1</span> || k != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">memset</span>(ans, <span class="hljs-number">0xff</span>, <span class="hljs-built_in">sizeof</span>(ans));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                cin &gt;&gt; cheese[i][j];<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>) &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构和算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DFS</tag>
      
      <tag>记忆化 DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分匹配问题 —— 匈牙利算法</title>
    <link href="/2023/02/25/%E4%BA%8C%E5%88%86%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/02/25/%E4%BA%8C%E5%88%86%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="问题介绍">问题介绍</h3><p><strong>什么是二分图？</strong></p><p>对于图 <span class="math inline">\(G(V,E)\)</span> 而言，若 <spanclass="math inline">\(G\)</span> 中的所有点可以划分为两个子集 <spanclass="math inline">\(G_1\)</span>、<spanclass="math inline">\(G_2\)</span> ，且图中每条边 <spanclass="math inline">\(e\)</span>关联的两个顶点都属于不同的顶点子集，这样的图我们称为<strong>二分图（Bipartite Graph ）</strong>，或者二部图。</p><p><img src="https://p.ipic.vip/ueiehn.png" style="zoom:67%;" /></p><p><strong>最大匹配问题和最小点覆盖问题</strong></p><p>什么是<strong>最大匹配问题</strong>？给定一个二分图 <spanclass="math inline">\(G(V,E)\)</span>，若 <spanclass="math inline">\((a_i,b_j) \in E\)</span> ，我们就称 <spanclass="math inline">\(a_i\)</span> 和 <spanclass="math inline">\(b_j\)</span>是可配对的，已知该图中任意顶点至多匹配一个顶点，求最大匹配数。如下图，不难看出该图的最大匹配数为2。其中一种匹配方式为 <span class="math inline">\((a_1,b_1)\)</span>、<span class="math inline">\((a_3, b_4)\)</span> 。</p><p>什么又是<strong>最小点覆盖问题</strong>呢？即从二分图中删除最少的顶点，使得图<span class="math inline">\(G\)</span>中任何一对点都无法匹配。删除顶点的最小数量称为最小点覆盖数。如下图，不难看出最小覆盖数也是2。我们可以删去 <span class="math inline">\(a_3\)</span> 和 <spanclass="math inline">\(b_1\)</span> 使得图中任何一对点都无法匹配。</p><p>这两个问题看似不一样，实际上实际上是处理一个相同的问题。为什么这么说呢？因为我们可以证明一条重要性质：</p><center><strong>最大匹配数 = 最小覆盖数</strong></center><p>具体证明就不在这里说明了，笔者打算以后单独出一期文章来证明该性质。</p><p><img src="https://p.ipic.vip/5pnk5n.png" style="zoom:45%;" /></p><p>那我们该如何给出二分匹配问题的一般解决方案呢？1955 年，库恩（W.W.Kuhn ）利用一个匈牙利数学家康哥尼（ D.Kőnig）的一个定理构造了一种二分匹配问题的解法，后人称之为<strong>匈牙利算法</strong>。</p><h3 id="匈牙利算法">匈牙利算法</h3><p>在介绍匈牙利算法之前，我们先介绍几个概念：</p><ul><li><p><strong>交替路</strong>：</p><p>从未匹配点出发，依次经过未匹配的边和已匹配的边的路径称为交替路。</p></li><li><p><strong>增广路</strong>：</p><p>经过除出发点之外其他未匹配点的交替路称为增广路。</p><p><strong>当且仅当不存在关于图 <span class="math inline">\(G\)</span>的增广路径时当前的匹配为图 <span class="math inline">\(G\)</span>的最大匹配。</strong></p></li></ul><h4 id="算法讲解">算法讲解</h4><p>如下图所示，我们接下来将使用匈牙利算法来计算该二分图的最大匹配数。</p><p>我们从 <span class="math inline">\(a_1\)</span> 开始匹配，<spanclass="math inline">\(a_1\)</span> 与 <spanclass="math inline">\(b_1\)</span> 匹配成功，即当前匹配对数为 1。</p><p><left><img src="https://p.ipic.vip/phzd9z.png" alt="(1)" style="zoom:100%; margin-right: 30px;" /><img src="https://p.ipic.vip/wfjof3.png" alt="(2)" style="zoom:100%; margin-right: 30px;" /></left></p><p>然后再对 <span class="math inline">\(a_2\)</span> 进行匹配，我们发现<span class="math inline">\(a_2\)</span> 只能匹配 <spanclass="math inline">\(b_1\)</span> ，而 <spanclass="math inline">\(b_1\)</span> 已经与 <spanclass="math inline">\(a_1\)</span> 匹配成功了，此时我们发现 <spanclass="math inline">\(a_1\)</span> 和 <spanclass="math inline">\(b_3\)</span> 可以成功匹配，于是我们可以取消 <spanclass="math inline">\(a_1\)</span> 和 <spanclass="math inline">\(b_1\)</span> 的匹配，然后匹配 <spanclass="math inline">\(a_1\)</span> 和 <spanclass="math inline">\(b_3\)</span> ，这个时候 <spanclass="math inline">\(a_2\)</span> 就可以匹配 <spanclass="math inline">\(b_1\)</span> 了。匹配对数加一，当前匹配对数为2。</p><p>其实这一步相当于找到了一条增广路 <span class="math inline">\((a_2,b_1, a_1, b_3)\)</span> ，然后对该增广路取反。</p><p><left><img src="https://p.ipic.vip/0dm74v.png" alt="(3)" style="zoom:100%;" /></left></p><p>接下来对 <span class="math inline">\(a_3\)</span> 进行匹配，<spanclass="math inline">\(a_3\)</span> 与 <spanclass="math inline">\(b_2\)</span>成功匹配，匹配对数加一，当前匹配对数为 3。</p><p><left><img src="https://p.ipic.vip/zhjyss.png" alt="(4)" style="zoom:100%;" /></left></p><p>最后对 <span class="math inline">\(a_4\)</span>进行匹配，发现其只能与 <span class="math inline">\(b_1\)</span> 匹配，而<span class="math inline">\(b_1\)</span> 已经与 <spanclass="math inline">\(a_1\)</span> 匹配过了，而且无法从 <spanclass="math inline">\(a_4\)</span> 出发构造一条增广路，因此 <spanclass="math inline">\(a_4\)</span> 无法与任何一个顶点成功匹配。</p><p><strong>综上所述，展示的二分图的最大匹配数为 3</strong>。</p><p><strong>伪代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pseudo-code">// 判断 ai 是否能匹配成功<br>for bj 与 ai 相连:<br>if bj 未被访问:<br>更新 bj 访问状态;<br>        if bj 未被匹配或者 bj 的配对点可以出发找到增广路径:<br>        将 bj 的配对点改为 ai;<br>        return true;<br><br>return false;<br></code></pre></td></tr></table></figure><p>时间复杂度：<span class="math inline">\(O(VE)\)</span></p><h4 id="代码实现">代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NOT_MATCH 0x3f3f3f3f</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">int</span> numA, numB; <span class="hljs-comment">// numA、numB 分别表示两个集合的元素个数</span><br>  vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; G; <span class="hljs-comment">// 假设这里用邻接链表储存图 G，G[i] 表示和 ai 相邻的所有 B 集合的顶点编号</span><br>  <span class="hljs-type">int</span> match[numB]; <span class="hljs-comment">// 记录 B 集合的元素的匹配点在 A 集合的编号</span><br>  <span class="hljs-type">bool</span> vis[numB]; <span class="hljs-comment">// 记录 B 集合的元素是否被访问过</span><br><br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isMatch</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123;<br>      <span class="hljs-comment">// 判断 A 集合中编号为 index 的顶点是否能匹配成功</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; G[index].<span class="hljs-built_in">size</span>(); i++) &#123;<br>          <span class="hljs-keyword">if</span> (!vis[G[i]]) &#123;<br>              vis[G[i]] = <span class="hljs-literal">true</span>;<br>              <span class="hljs-keyword">if</span> (match[G[i]] == NOT_MATCH || <span class="hljs-built_in">isMatch</span>(match[[G[i]]])) &#123;<br>                <span class="hljs-comment">// 该顶点未被匹配或着原来匹配该点的顶点可以匹配其他顶点</span><br>                  match[G[i]] = index;<br>                  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>      <br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hungarian</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numA; i++) &#123;<br>          <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isMatch</span>(i)) &#123;<br>              cnt++;<br>            &#125;<br>        &#125;<br>      <br>      <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实际应用">实际应用</h4><blockquote><p><strong>Machine Schedule</strong></p><p>Problem Description As we all know, machine scheduling is a veryclassical problem in computer science and has been studied for a verylong history. Scheduling problems differ widely in the nature of theconstraints that must be satisfied and the type of schedule desired.Here we consider a 2-machine scheduling problem.</p><p>There are two machines A and B. Machine A has n kinds of workingmodes, which is called <span class="math inline">\(mode_0\)</span> ,<span class="math inline">\(mode_1\)</span> , …, <spanclass="math inline">\(mode_{n-1}\)</span> , likewise machine B has mkinds of working modes, <span class="math inline">\(mode_0\)</span>,<span class="math inline">\(mode_1\)</span> , … , <spanclass="math inline">\(mode_{m-1}\)</span> . At the beginning they areboth work at <span class="math inline">\(mode_0\)</span>.</p><p>For k jobs given, each of them can be processed in either one of thetwo machines in particular mode. For example, job 0 can either beprocessed in machine A at <span class="math inline">\(mode_3\)</span> orin machine B at <span class="math inline">\(mode_4\)</span> , job 1 caneither be processed in machine A at <spanclass="math inline">\(mode_2\)</span> or in machine B at <spanclass="math inline">\(mode_4\)</span> , and so on. Thus, for job i, theconstraint can be represent as a triple (i, x, y), which means it can beprocessed either in machine A at <spanclass="math inline">\(mode_x\)</span>, or in machine B at <spanclass="math inline">\(mode_y\)</span> .</p><p>Obviously, to accomplish all the jobs, we need to change themachine’s working mode from time to time, but unfortunately, themachine’s working mode can only be changed by restarting it manually. Bychanging the sequence of the jobs and assigning each job to a suitablemachine, please write a program to minimize the times of restartingmachines.</p><p>Input The input file for this program consists of severalconfigurations. The first line of one configuration contains threepositive integers: n, m (n, m &lt; 100) and k (k &lt; 1000). Thefollowing k lines give the constrains of the k jobs, each line is atriple: i, x, y.</p><p>The input will be terminated by a line containing a single zero.</p><p>Output The output should be one integer per line, which means theminimal times of restarting machine.</p><p>输入案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs input">5 5 10<br>0 1 1<br>1 1 2<br>2 1 3<br>3 1 4<br>4 2 1<br>5 2 2<br>6 2 3<br>7 2 4<br>8 3 3<br>9 4 3<br>0<br></code></pre></td></tr></table></figure><p>输出案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs output">3<br></code></pre></td></tr></table></figure></blockquote><p>对于此题，我们可以将 A、B机器的所有模式看成二部图看成两个子集，若某个工作需要机器 A 的 x模式和机器 B 的 y 模式来完成，就将 <span class="math inline">\((a_x,b_y)\)</span>连接起来。最后我们的问题就变成了：<strong>应该如何找到该二部图的最小点覆盖数？</strong></p><p>而根据我们之前提到的结论可知，最小点覆盖数在数值上等于最大匹配数。</p><p><strong>代码</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_NUM 105</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NOT_FOUND 0x3f3f3f3f</span><br><br><span class="hljs-type">int</span> G[MAX_NUM][MAX_NUM];<br><span class="hljs-type">bool</span> vis[MAX_NUM];<br><span class="hljs-type">int</span> match[MAX_NUM];<br><br><span class="hljs-type">int</span> n, m, k;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isMatch</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">if</span> (G[index][i] &amp;&amp; !vis[i]) &#123;<br>            vis[i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (match[i] == NOT_FOUND || <span class="hljs-built_in">isMatch</span>(match[i])) &#123;<br>                match[i] = index;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        cin &gt;&gt; m &gt;&gt; k;<br>        <span class="hljs-built_in">memset</span>(G, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(G));<br>        <span class="hljs-built_in">memset</span>(match, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(match));<br>        <span class="hljs-comment">// 初始化</span><br>        <span class="hljs-type">int</span> t, ax, by;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            cin &gt;&gt; t &gt;&gt; ax &gt;&gt; by;<br>            <span class="hljs-keyword">if</span> (ax != <span class="hljs-number">0</span> &amp;&amp; by != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 0 号模式下可以完成的任务不用添加</span><br>                G[ax][by] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isMatch</span>(i)) &#123;<br>                cnt++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 求出最小点覆盖数</span><br><br>        cout &lt;&lt; cnt &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构和算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DFS</tag>
      
      <tag>二分匹配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLDB 快速入门</title>
    <link href="/2023/02/22/LLDB%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2023/02/22/LLDB%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p><strong><em>如果调试是删除 bug 的过程，那么编程就是引入 bug的过程。</em></strong></p><p><strong>—— Edsger W. Dijkstra</strong></p><hr /><h4 id="lldb-是什么">LLDB 是什么？</h4><p>LLDB（ Low level Debug ）是 MacOS 默认进行调试 C/C++程序的调试工具，能帮开发者进行更加丰富地流程控制和栈帧数据监测。</p><p><strong>简言之，LLDB 是一个有着 REPL 的特性和 C++ 、Python插件的开源调试器。</strong></p><p>在此，我们以几个简单的程序为例子，对 LLDB 进行快速入门。</p><p><strong>目录</strong></p><ul><li><p>启动 LLDB</p></li><li><p>断点操作</p><ul><li>设置断点</li><li>查看断点</li><li>删除断点</li></ul></li><li><p>分步调试</p><ul><li>启动调试</li><li>进入，跳过和继续</li><li>跳出当前函数</li></ul></li><li><p>查看变量</p></li><li><p>结束调试</p></li></ul><h4 id="启动-lldb">启动 LLDB</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fact</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> n * <span class="hljs-built_in">fact</span>(n - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> x = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> z = x + y;<br><br>    cout &lt;&lt; <span class="hljs-built_in">fact</span>(z) &lt;&lt; endl;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译 C/C++ 程序时使其可以被 LLDB 调试工具设置断点，需要添加<code>-g</code> ，以 C++ 文件 <code>demo.cpp</code> 为例：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">clang++ -g demo.cpp<br><br>lldb a.out<br></code></pre></td></tr></table></figure><h4 id="断点操作">断点操作</h4><h6 id="设置断点">设置断点</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">br s -f [文件名] -l [行号]# 在文件的某一行设置断点<br>br s -n [函数名]# 给函数设置断点<br></code></pre></td></tr></table></figure><h6 id="查看断点">查看断点</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">br list# 显示所有断点和其序号<br></code></pre></td></tr></table></figure><h6 id="删除断点">删除断点</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">br <span class="hljs-built_in">del</span> [断点序号]<br>br <span class="hljs-built_in">del</span> # 删除所有断点<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cmd">(lldb) br s -f demo.cpp -l <span class="hljs-number">17</span><br>Breakpoint <span class="hljs-number">1</span>: where = a.out`main + <span class="hljs-number">28</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">17</span>:<span class="hljs-number">9</span>, address = <span class="hljs-number">0</span>x0000000100003d80<br>(lldb) br s -f demo.cpp -l <span class="hljs-number">21</span><br>Breakpoint <span class="hljs-number">2</span>: where = a.out`main + <span class="hljs-number">56</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">21</span>:<span class="hljs-number">18</span>, address = <span class="hljs-number">0</span>x0000000100003d9c<br>(lldb) br s -n fact<br>Breakpoint <span class="hljs-number">3</span>: where = a.out`fact(int) + <span class="hljs-number">16</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">6</span>:<span class="hljs-number">9</span>, address = <span class="hljs-number">0</span>x0000000100003d18<br>(lldb) br list<br>Current breakpoints:<br><span class="hljs-number">1</span>: file = &#x27;demo.cpp&#x27;, line = <span class="hljs-number">17</span>, exact_match = <span class="hljs-number">0</span>, locations = <span class="hljs-number">1</span><br>  <span class="hljs-number">1</span>.<span class="hljs-number">1</span>: where = a.out`main + <span class="hljs-number">28</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">17</span>:<span class="hljs-number">9</span>, address = a.out[<span class="hljs-number">0</span>x0000000100003d80], unresolved, hit count = <span class="hljs-number">0</span> <br><br><span class="hljs-number">2</span>: file = &#x27;demo.cpp&#x27;, line = <span class="hljs-number">21</span>, exact_match = <span class="hljs-number">0</span>, locations = <span class="hljs-number">1</span><br>  <span class="hljs-number">2</span>.<span class="hljs-number">1</span>: where = a.out`main + <span class="hljs-number">56</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">21</span>:<span class="hljs-number">18</span>, address = a.out[<span class="hljs-number">0</span>x0000000100003d9c], unresolved, hit count = <span class="hljs-number">0</span> <br><br><span class="hljs-number">3</span>: name = &#x27;fact&#x27;, locations = <span class="hljs-number">1</span><br>  <span class="hljs-number">3</span>.<span class="hljs-number">1</span>: where = a.out`fact(int) + <span class="hljs-number">16</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">6</span>:<span class="hljs-number">9</span>, address = a.out[<span class="hljs-number">0</span>x0000000100003d18], unresolved, hit count = <span class="hljs-number">0</span> <br><br>(lldb) br <span class="hljs-built_in">del</span> <span class="hljs-number">3</span><br><span class="hljs-number">1</span> breakpoints deleted; <span class="hljs-number">0</span> breakpoint locations disabled.<br>(lldb) br list<br>Current breakpoints:<br><span class="hljs-number">1</span>: file = &#x27;demo.cpp&#x27;, line = <span class="hljs-number">17</span>, exact_match = <span class="hljs-number">0</span>, locations = <span class="hljs-number">1</span><br>  <span class="hljs-number">1</span>.<span class="hljs-number">1</span>: where = a.out`main + <span class="hljs-number">28</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">17</span>:<span class="hljs-number">9</span>, address = a.out[<span class="hljs-number">0</span>x0000000100003d80], unresolved, hit count = <span class="hljs-number">0</span> <br><br><span class="hljs-number">2</span>: file = &#x27;demo.cpp&#x27;, line = <span class="hljs-number">21</span>, exact_match = <span class="hljs-number">0</span>, locations = <span class="hljs-number">1</span><br>  <span class="hljs-number">2</span>.<span class="hljs-number">1</span>: where = a.out`main + <span class="hljs-number">56</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">21</span>:<span class="hljs-number">18</span>, address = a.out[<span class="hljs-number">0</span>x0000000100003d9c], unresolved, hit count = <span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><h4 id="分步调试">分步调试</h4><h6 id="启动调试">启动调试</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">r<br></code></pre></td></tr></table></figure><blockquote><p>输入 <code>run</code> 或者 <code>r</code> 后程序便会开始启动调试</p></blockquote><h6 id="进入跳过和继续">进入，跳过和继续</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 进入单步执行，中间如果有函数调用会跳转到目标函数<br>s<br><br># 跳过单步执行，中间的函数执行过程会跳过<br>n<br><br># 继续跳转到下一个断点<br>c<br></code></pre></td></tr></table></figure><h6 id="跳出当前函数">跳出当前函数</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">finish<br></code></pre></td></tr></table></figure><h4 id="查看变量">查看变量</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 查看某个变量：<br>p [变量名]<br><br><br># 查看当前栈帧所有变量<br>fr v<br><br><br># 切换栈帧<br>fr s [栈帧序号]<br><br><br># 打印当前线程的栈帧信息<br>bt<br><br><br># 打印所有线程的栈帧信息<br>bt all<br></code></pre></td></tr></table></figure><p>综合案例：在 <code>demo.cpp</code> 的 17 行和 21 行设置断点，使用<code>r</code> 开始调试</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs cmd">* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = breakpoint <span class="hljs-number">1</span>.<span class="hljs-number">1</span><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0</span>x0000000100003d80 a.out`main <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">17</span>:<span class="hljs-number">9</span><br>   <span class="hljs-number">14</span>  <br>   <span class="hljs-number">15</span>   int main() &#123;<br>   <span class="hljs-number">16</span>  <br>-&gt; <span class="hljs-number">17</span>       int x = <span class="hljs-number">2</span>;<br>   <span class="hljs-number">18</span>       int y = <span class="hljs-number">3</span>;<br>   <span class="hljs-number">19</span>       int z = x + y;<br>   <span class="hljs-number">20</span>  <br>Target <span class="hljs-number">0</span>: (a.out) stopped.<br>(lldb) s<br>Process <span class="hljs-number">31435</span> stopped<br>* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step <span class="hljs-keyword">in</span><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0</span>x0000000100003d88 a.out`main <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">18</span>:<span class="hljs-number">9</span><br>   <span class="hljs-number">15</span>   int main() &#123;<br>   <span class="hljs-number">16</span>  <br>   <span class="hljs-number">17</span>       int x = <span class="hljs-number">2</span>;<br>-&gt; <span class="hljs-number">18</span>       int y = <span class="hljs-number">3</span>;<br>   <span class="hljs-number">19</span>       int z = x + y;<br>   <span class="hljs-number">20</span>  <br>   <span class="hljs-number">21</span>       cout &lt;&lt; fact(z) &lt;&lt; endl;<br>Target <span class="hljs-number">0</span>: (a.out) stopped.<br>(lldb) s<br>Process <span class="hljs-number">31435</span> stopped<br>* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step <span class="hljs-keyword">in</span><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0</span>x0000000100003d8c a.out`main <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">19</span>:<span class="hljs-number">13</span><br>   <span class="hljs-number">16</span>  <br>   <span class="hljs-number">17</span>       int x = <span class="hljs-number">2</span>;<br>   <span class="hljs-number">18</span>       int y = <span class="hljs-number">3</span>;<br>-&gt; <span class="hljs-number">19</span>       int z = x + y;<br>   <span class="hljs-number">20</span>  <br>   <span class="hljs-number">21</span>       cout &lt;&lt; fact(z) &lt;&lt; endl;<br>   <span class="hljs-number">22</span>  <br>Target <span class="hljs-number">0</span>: (a.out) stopped.<br>(lldb) s<br>Process <span class="hljs-number">31435</span> stopped<br>* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = breakpoint <span class="hljs-number">2</span>.<span class="hljs-number">1</span><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0</span>x0000000100003d9c a.out`main <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">21</span>:<span class="hljs-number">18</span><br>   <span class="hljs-number">18</span>       int y = <span class="hljs-number">3</span>;<br>   <span class="hljs-number">19</span>       int z = x + y;<br>   <span class="hljs-number">20</span>  <br>-&gt; <span class="hljs-number">21</span>       cout &lt;&lt; fact(z) &lt;&lt; endl;<br>   <span class="hljs-number">22</span>  <br>   <span class="hljs-number">23</span>       return <span class="hljs-number">0</span>;<br>   <span class="hljs-number">24</span>   &#125;<br>Target <span class="hljs-number">0</span>: (a.out) stopped.<br>(lldb) fr v<br>(int) x = <span class="hljs-number">2</span><br>(int) y = <span class="hljs-number">3</span><br>(int) z = <span class="hljs-number">5</span><br>(lldb) s<br>Process <span class="hljs-number">31435</span> stopped<br>* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step <span class="hljs-keyword">in</span><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0</span>x0000000100003d18 a.out`fact(n=<span class="hljs-number">5</span>) <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">6</span>:<span class="hljs-number">9</span><br>   <span class="hljs-number">3</span>    using namespace std;<br>   <span class="hljs-number">4</span>   <br>   <span class="hljs-number">5</span>    int fact(int n) &#123;<br>-&gt; <span class="hljs-number">6</span>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-number">7</span>            return <span class="hljs-number">1</span>;<br>   <span class="hljs-number">8</span>        &#125;<br>   <span class="hljs-number">9</span>        <span class="hljs-keyword">else</span> &#123;<br>Target <span class="hljs-number">0</span>: (a.out) stopped.<br>(lldb) finish<br>Process <span class="hljs-number">31435</span> stopped<br>* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step out<br>Return value: (int) $<span class="hljs-number">0</span> = <span class="hljs-number">120</span><br><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0</span>x0000000100003da4 a.out`main <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">21</span>:<span class="hljs-number">13</span><br>   <span class="hljs-number">18</span>       int y = <span class="hljs-number">3</span>;<br>   <span class="hljs-number">19</span>       int z = x + y;<br>   <span class="hljs-number">20</span>  <br>-&gt; <span class="hljs-number">21</span>       cout &lt;&lt; fact(z) &lt;&lt; endl;<br>   <span class="hljs-number">22</span>  <br>   <span class="hljs-number">23</span>       return <span class="hljs-number">0</span>;<br>   <span class="hljs-number">24</span>   &#125;<br>Target <span class="hljs-number">0</span>: (a.out) stopped.<br>(lldb) c<br>Process <span class="hljs-number">31435</span> resuming<br><span class="hljs-number">120</span><br>Process <span class="hljs-number">31435</span> exited with status = <span class="hljs-number">0</span> (<span class="hljs-number">0</span>x00000000)<br></code></pre></td></tr></table></figure><h4 id="结束调试">结束调试</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">q<br></code></pre></td></tr></table></figure><blockquote><p>输入 <code>quit</code> 或者 <code>q</code> 结束 LLDB 调试</p></blockquote><p><strong>以上就是对 LLDB 的一个简单介绍了，如果想了解更多 LLDB指令，可以查看官网的 <a href="https://lldb.llvm.org/use/map.html">LLDBcommand map</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++ 开发</tag>
      
      <tag>调试器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 脚手架配置代理的方法</title>
    <link href="/2023/02/07/React%20%E8%84%9A%E6%89%8B%E6%9E%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2023/02/07/React%20%E8%84%9A%E6%89%8B%E6%9E%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="方法一直接在-package.json-中追加配置">方法一：直接在<code>package.json</code> 中追加配置</h4><p>例如，当前服务器端口为 3000，若要向端口 5000的服务器发送请求，我们可以在 <code>package.json</code>中添加如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:5000&quot;</span><br></code></pre></td></tr></table></figure><p>此后，当请求了 3000 端口不存在的资源时，那么请求就会转发给 5000端口。</p><p>示例：</p><p>例如一个 <code>create-react-app</code> 创建项目在 3001端口运行，我们使用 <code>json-server</code> 模拟了一个 3000端口的服务器，其中 JSON 数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;students&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0001&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Tom&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0002&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Jack&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">19</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0003&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Frank&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>students</code> 数据的 URL 为<code>http://localhost:3000/students</code>，若我们要向 3001 端口发送GET 请求来获取 <code>students</code> 的 JSON 数据，则可以在<code>package.json</code> 中添加配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:3000&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>获取 3001 端口有的资源：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  getInfo = <span class="hljs-function">() =&gt;</span> &#123;<br>    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:3001/index.html&quot;</span>).<span class="hljs-title function_">then</span>(<br>      <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);<br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      &#125;<br>    );<br>  &#125;<br><br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.getInfo&#125;</span>&gt;</span>点击发送请求获取数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时控制台输出当前项目下的 <code>index.html</code> 文件：</p><p><left><img src="https://p.ipic.vip/vyhdeu.png" alt="image-20230207230919387" style="zoom: 33%;" /></left></p></li><li><p>获取 3001 端口没有而 3000 端口有的资源：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  getInfo = <span class="hljs-function">() =&gt;</span> &#123;<br>    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:3001/students&quot;</span>).<span class="hljs-title function_">then</span>(<br>      <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);<br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      &#125;<br>    );<br>  &#125;<br><br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.getInfo&#125;</span>&gt;</span>点击发送请求获取数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时控制台输出 3000 端口下的 <code>students</code> 数据：</p><p><left><img src="https://p.ipic.vip/hxjhru.png" alt="image-20230207231130393" style="zoom:50%;" /></left></p></li><li><p>若获取的资源 3001 端口和 3000端口都没有，则控制台会报错。</p></li></ul><blockquote><p>方法一优缺点：</p><ul><li>优点：配置简单，前端请求资源时可以不加任何前缀</li><li>缺点：不能配置多个代理</li></ul></blockquote><h4 id="方法二创建-setupproxy.js-文件">方法二：创建<code>setupProxy.js</code> 文件</h4><ol type="1"><li><p>首先在 src 目录下创建 <code>setupProxy.js</code> 文件</p></li><li><p>编写 <code>setupProxy.js</code> 配置具体代码规范：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 配置端口 8000 和端口 5001 的服务器代理</span><br><span class="hljs-comment">// setupProxy.js</span><br><br><span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>);<br><span class="hljs-comment">// 引入内置模块: HTTP 代理中间件</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">app</span>) &#123;<br>    <span class="hljs-comment">// app 为服务对象</span><br>    app.<span class="hljs-title function_">use</span>(<br>        <span class="hljs-title function_">createProxyMiddleware</span>(<span class="hljs-string">&#x27;/api1&#x27;</span>, &#123;<span class="hljs-comment">// 遇见 /api1 前缀的请求，就会触发该代理</span><br>            <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8000&#x27;</span>,<span class="hljs-comment">// 请求转发的端口地址</span><br>            <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">// 控制服务器收到响应头中 Host 字段的值</span><br>            <span class="hljs-attr">pathRewrite</span>: &#123;<br>                <span class="hljs-string">&#x27;^/api1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">// 去除请求前缀，保证交给后台服务器的是正常请求地址</span><br>            &#125;<br>        &#125;)<br>    );<br>    <br>    app.<span class="hljs-title function_">use</span>(<br>        <span class="hljs-title function_">createProxyMiddleware</span>(<span class="hljs-string">&#x27;/api2&#x27;</span>, &#123;<br>            <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5001&#x27;</span>,<br>            <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">pathRewrite</span>: &#123;<br>                <span class="hljs-string">&#x27;^/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>            &#125;<br>        &#125;)<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>http-proxy-middleware</code> 1.x 版本后配置代理使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>);<br></code></pre></td></tr></table></figure><p>此前使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proxy = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>);<br></code></pre></td></tr></table></figure></blockquote></li><li><p>向不同端口发送请求的方法：</p><ul><li><p>如果要向 8000 端口发送请求，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:3000/api1/teachers&#x27;</span>).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-comment">// ...</span><br>);<br></code></pre></td></tr></table></figure></li><li><p>如果要向 5001 端口发送请求，同理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:3000/api2/students&#x27;</span>).<span class="hljs-title function_">then</span>(<br><span class="hljs-comment">// ...</span><br>);<br></code></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>方法二优缺点：</p><ul><li>优点：可以配置多个代理，可以更加灵活地控制是否走代理请求</li><li>缺点：配置繁琐，前端发送代理请求时必须加前缀</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
