<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LLDB 快速入门</title>
    <link href="/2023/02/22/LLDB%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2023/02/22/LLDB%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p><em><strong>如果调试是删除 bug 的过程，那么编程就是引入 bug 的过程。</strong></em></p><p><strong>—— Edsger W. Dijkstra</strong></p><hr><h4 id="LLDB-是什么？"><a href="#LLDB-是什么？" class="headerlink" title="LLDB 是什么？"></a>LLDB 是什么？</h4><p>LLDB（ Low level Debug ）是 MacOS 默认进行调试 C&#x2F;C++ 程序的调试工具，能帮开发者进行更加丰富地流程控制和栈帧数据监测。</p><p><strong>简言之，LLDB 是一个有着 REPL 的特性和 C++ 、Python 插件的开源调试器。</strong></p><p>在此，我们以几个简单的程序为例子，对 LLDB 进行快速入门。</p><p><strong>目录</strong></p><ul><li><p>启动 LLDB</p></li><li><p>断点操作</p><ul><li>设置断点</li><li>查看断点</li><li>删除断点</li></ul></li><li><p>分步调试</p><ul><li>启动调试</li><li>进入，跳过和继续</li><li>跳出当前函数</li></ul></li><li><p>查看变量</p></li><li><p>结束调试</p></li></ul><h4 id="启动-LLDB"><a href="#启动-LLDB" class="headerlink" title="启动 LLDB"></a>启动 LLDB</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// demo.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fact</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> n * <span class="hljs-built_in">fact</span>(n - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> x = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> z = x + y;<br><br>    cout &lt;&lt; <span class="hljs-built_in">fact</span>(z) &lt;&lt; endl;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译 C&#x2F;C++ 程序时使其可以被 LLDB 调试工具设置断点，需要添加 <code>-g</code> ，以 C++ 文件 <code>demo.cpp</code> 为例：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">clang++ -g demo.cpp<br><br>lldb a.out<br></code></pre></td></tr></table></figure><h4 id="断点操作"><a href="#断点操作" class="headerlink" title="断点操作"></a>断点操作</h4><h6 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">br s -f [文件名] -l [行号]# 在文件的某一行设置断点<br>br s -n [函数名]# 给函数设置断点<br></code></pre></td></tr></table></figure><h6 id="查看断点"><a href="#查看断点" class="headerlink" title="查看断点"></a>查看断点</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">br list# 显示所有断点和其序号<br></code></pre></td></tr></table></figure><h6 id="删除断点"><a href="#删除断点" class="headerlink" title="删除断点"></a>删除断点</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">br <span class="hljs-built_in">del</span> [断点序号]<br>br <span class="hljs-built_in">del</span> # 删除所有断点<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cmd">(lldb) br s -f demo.cpp -l <span class="hljs-number">17</span><br>Breakpoint <span class="hljs-number">1</span>: where = a.out`main + <span class="hljs-number">28</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">17</span>:<span class="hljs-number">9</span>, address = <span class="hljs-number">0</span>x0000000100003d80<br>(lldb) br s -f demo.cpp -l <span class="hljs-number">21</span><br>Breakpoint <span class="hljs-number">2</span>: where = a.out`main + <span class="hljs-number">56</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">21</span>:<span class="hljs-number">18</span>, address = <span class="hljs-number">0</span>x0000000100003d9c<br>(lldb) br s -n fact<br>Breakpoint <span class="hljs-number">3</span>: where = a.out`fact(int) + <span class="hljs-number">16</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">6</span>:<span class="hljs-number">9</span>, address = <span class="hljs-number">0</span>x0000000100003d18<br>(lldb) br list<br>Current breakpoints:<br><span class="hljs-number">1</span>: file = &#x27;demo.cpp&#x27;, line = <span class="hljs-number">17</span>, exact_match = <span class="hljs-number">0</span>, locations = <span class="hljs-number">1</span><br>  <span class="hljs-number">1</span>.<span class="hljs-number">1</span>: where = a.out`main + <span class="hljs-number">28</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">17</span>:<span class="hljs-number">9</span>, address = a.out[<span class="hljs-number">0</span>x0000000100003d80], unresolved, hit count = <span class="hljs-number">0</span> <br><br><span class="hljs-number">2</span>: file = &#x27;demo.cpp&#x27;, line = <span class="hljs-number">21</span>, exact_match = <span class="hljs-number">0</span>, locations = <span class="hljs-number">1</span><br>  <span class="hljs-number">2</span>.<span class="hljs-number">1</span>: where = a.out`main + <span class="hljs-number">56</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">21</span>:<span class="hljs-number">18</span>, address = a.out[<span class="hljs-number">0</span>x0000000100003d9c], unresolved, hit count = <span class="hljs-number">0</span> <br><br><span class="hljs-number">3</span>: name = &#x27;fact&#x27;, locations = <span class="hljs-number">1</span><br>  <span class="hljs-number">3</span>.<span class="hljs-number">1</span>: where = a.out`fact(int) + <span class="hljs-number">16</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">6</span>:<span class="hljs-number">9</span>, address = a.out[<span class="hljs-number">0</span>x0000000100003d18], unresolved, hit count = <span class="hljs-number">0</span> <br><br>(lldb) br <span class="hljs-built_in">del</span> <span class="hljs-number">3</span><br><span class="hljs-number">1</span> breakpoints deleted; <span class="hljs-number">0</span> breakpoint locations disabled.<br>(lldb) br list<br>Current breakpoints:<br><span class="hljs-number">1</span>: file = &#x27;demo.cpp&#x27;, line = <span class="hljs-number">17</span>, exact_match = <span class="hljs-number">0</span>, locations = <span class="hljs-number">1</span><br>  <span class="hljs-number">1</span>.<span class="hljs-number">1</span>: where = a.out`main + <span class="hljs-number">28</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">17</span>:<span class="hljs-number">9</span>, address = a.out[<span class="hljs-number">0</span>x0000000100003d80], unresolved, hit count = <span class="hljs-number">0</span> <br><br><span class="hljs-number">2</span>: file = &#x27;demo.cpp&#x27;, line = <span class="hljs-number">21</span>, exact_match = <span class="hljs-number">0</span>, locations = <span class="hljs-number">1</span><br>  <span class="hljs-number">2</span>.<span class="hljs-number">1</span>: where = a.out`main + <span class="hljs-number">56</span> <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">21</span>:<span class="hljs-number">18</span>, address = a.out[<span class="hljs-number">0</span>x0000000100003d9c], unresolved, hit count = <span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><h4 id="分步调试"><a href="#分步调试" class="headerlink" title="分步调试"></a>分步调试</h4><h6 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">r<br></code></pre></td></tr></table></figure><blockquote><p>输入 <code>run</code> 或者 <code>r</code> 后程序便会开始启动调试</p></blockquote><h6 id="进入，跳过和继续"><a href="#进入，跳过和继续" class="headerlink" title="进入，跳过和继续"></a>进入，跳过和继续</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 进入单步执行，中间如果有函数调用会跳转到目标函数<br>s<br><br># 跳过单步执行，中间的函数执行过程会跳过<br>n<br><br># 继续跳转到下一个断点<br>c<br></code></pre></td></tr></table></figure><h6 id="跳出当前函数"><a href="#跳出当前函数" class="headerlink" title="跳出当前函数"></a>跳出当前函数</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">finish<br></code></pre></td></tr></table></figure><h4 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 查看某个变量：<br>p [变量名]<br><br><br># 查看当前栈帧所有变量<br>fr v<br><br><br># 切换栈帧<br>fr s [栈帧序号]<br><br><br># 打印当前线程的栈帧信息<br>bt<br><br><br># 打印所有线程的栈帧信息<br>bt all<br></code></pre></td></tr></table></figure><p>综合案例：在 <code>demo.cpp</code> 的 17 行和 21 行设置断点，使用 <code>r</code> 开始调试</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs cmd">* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = breakpoint <span class="hljs-number">1</span>.<span class="hljs-number">1</span><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0</span>x0000000100003d80 a.out`main <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">17</span>:<span class="hljs-number">9</span><br>   <span class="hljs-number">14</span>  <br>   <span class="hljs-number">15</span>   int main() &#123;<br>   <span class="hljs-number">16</span>  <br>-&gt; <span class="hljs-number">17</span>       int x = <span class="hljs-number">2</span>;<br>   <span class="hljs-number">18</span>       int y = <span class="hljs-number">3</span>;<br>   <span class="hljs-number">19</span>       int z = x + y;<br>   <span class="hljs-number">20</span>  <br>Target <span class="hljs-number">0</span>: (a.out) stopped.<br>(lldb) s<br>Process <span class="hljs-number">31435</span> stopped<br>* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step <span class="hljs-keyword">in</span><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0</span>x0000000100003d88 a.out`main <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">18</span>:<span class="hljs-number">9</span><br>   <span class="hljs-number">15</span>   int main() &#123;<br>   <span class="hljs-number">16</span>  <br>   <span class="hljs-number">17</span>       int x = <span class="hljs-number">2</span>;<br>-&gt; <span class="hljs-number">18</span>       int y = <span class="hljs-number">3</span>;<br>   <span class="hljs-number">19</span>       int z = x + y;<br>   <span class="hljs-number">20</span>  <br>   <span class="hljs-number">21</span>       cout &lt;&lt; fact(z) &lt;&lt; endl;<br>Target <span class="hljs-number">0</span>: (a.out) stopped.<br>(lldb) s<br>Process <span class="hljs-number">31435</span> stopped<br>* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step <span class="hljs-keyword">in</span><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0</span>x0000000100003d8c a.out`main <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">19</span>:<span class="hljs-number">13</span><br>   <span class="hljs-number">16</span>  <br>   <span class="hljs-number">17</span>       int x = <span class="hljs-number">2</span>;<br>   <span class="hljs-number">18</span>       int y = <span class="hljs-number">3</span>;<br>-&gt; <span class="hljs-number">19</span>       int z = x + y;<br>   <span class="hljs-number">20</span>  <br>   <span class="hljs-number">21</span>       cout &lt;&lt; fact(z) &lt;&lt; endl;<br>   <span class="hljs-number">22</span>  <br>Target <span class="hljs-number">0</span>: (a.out) stopped.<br>(lldb) s<br>Process <span class="hljs-number">31435</span> stopped<br>* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = breakpoint <span class="hljs-number">2</span>.<span class="hljs-number">1</span><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0</span>x0000000100003d9c a.out`main <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">21</span>:<span class="hljs-number">18</span><br>   <span class="hljs-number">18</span>       int y = <span class="hljs-number">3</span>;<br>   <span class="hljs-number">19</span>       int z = x + y;<br>   <span class="hljs-number">20</span>  <br>-&gt; <span class="hljs-number">21</span>       cout &lt;&lt; fact(z) &lt;&lt; endl;<br>   <span class="hljs-number">22</span>  <br>   <span class="hljs-number">23</span>       return <span class="hljs-number">0</span>;<br>   <span class="hljs-number">24</span>   &#125;<br>Target <span class="hljs-number">0</span>: (a.out) stopped.<br>(lldb) fr v<br>(int) x = <span class="hljs-number">2</span><br>(int) y = <span class="hljs-number">3</span><br>(int) z = <span class="hljs-number">5</span><br>(lldb) s<br>Process <span class="hljs-number">31435</span> stopped<br>* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step <span class="hljs-keyword">in</span><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0</span>x0000000100003d18 a.out`fact(n=<span class="hljs-number">5</span>) <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">6</span>:<span class="hljs-number">9</span><br>   <span class="hljs-number">3</span>    using namespace std;<br>   <span class="hljs-number">4</span>   <br>   <span class="hljs-number">5</span>    int fact(int n) &#123;<br>-&gt; <span class="hljs-number">6</span>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-number">7</span>            return <span class="hljs-number">1</span>;<br>   <span class="hljs-number">8</span>        &#125;<br>   <span class="hljs-number">9</span>        <span class="hljs-keyword">else</span> &#123;<br>Target <span class="hljs-number">0</span>: (a.out) stopped.<br>(lldb) finish<br>Process <span class="hljs-number">31435</span> stopped<br>* thread #<span class="hljs-number">1</span>, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step out<br>Return value: (int) $<span class="hljs-number">0</span> = <span class="hljs-number">120</span><br><br>    frame #<span class="hljs-number">0</span>: <span class="hljs-number">0</span>x0000000100003da4 a.out`main <span class="hljs-built_in">at</span> demo.cpp:<span class="hljs-number">21</span>:<span class="hljs-number">13</span><br>   <span class="hljs-number">18</span>       int y = <span class="hljs-number">3</span>;<br>   <span class="hljs-number">19</span>       int z = x + y;<br>   <span class="hljs-number">20</span>  <br>-&gt; <span class="hljs-number">21</span>       cout &lt;&lt; fact(z) &lt;&lt; endl;<br>   <span class="hljs-number">22</span>  <br>   <span class="hljs-number">23</span>       return <span class="hljs-number">0</span>;<br>   <span class="hljs-number">24</span>   &#125;<br>Target <span class="hljs-number">0</span>: (a.out) stopped.<br>(lldb) c<br>Process <span class="hljs-number">31435</span> resuming<br><span class="hljs-number">120</span><br>Process <span class="hljs-number">31435</span> exited with status = <span class="hljs-number">0</span> (<span class="hljs-number">0</span>x00000000)<br></code></pre></td></tr></table></figure><h4 id="结束调试"><a href="#结束调试" class="headerlink" title="结束调试"></a>结束调试</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">q<br></code></pre></td></tr></table></figure><blockquote><p>输入 <code>quit</code> 或者 <code>q</code> 结束 LLDB 调试</p></blockquote><p><strong>以上就是对 LLDB 的一个简单介绍了，如果想了解更多 LLDB 指令，可以查看官网的 <a href="https://lldb.llvm.org/use/map.html">LLDB command map</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++ 开发</tag>
      
      <tag>调试器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 脚手架配置代理的方法</title>
    <link href="/2023/02/07/React%20%E8%84%9A%E6%89%8B%E6%9E%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2023/02/07/React%20%E8%84%9A%E6%89%8B%E6%9E%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="方法一：直接在-package-json-中追加配置"><a href="#方法一：直接在-package-json-中追加配置" class="headerlink" title="方法一：直接在 package.json 中追加配置"></a>方法一：直接在 <code>package.json</code> 中追加配置</h4><p>例如，当前服务器端口为 3000，若要向端口 5000 的服务器发送请求，我们可以在  <code>package.json</code> 中添加如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:5000&quot;</span><br></code></pre></td></tr></table></figure><p>此后，当请求了 3000 端口不存在的资源时，那么请求就会转发给 5000 端口。</p><p>示例：</p><p>例如一个 <code>create-react-app</code> 创建项目在 3001 端口运行，我们使用 <code>json-server</code> 模拟了一个 3000 端口的服务器，其中 JSON 数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;students&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0001&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Tom&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0002&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Jack&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">19</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0003&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Frank&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>students</code> 数据的 URL 为 <code>http://localhost:3000/students</code>，若我们要向 3001 端口发送 GET 请求来获取 <code>students</code> 的 JSON 数据，则可以在 <code>package.json</code> 中添加配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:3000&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>获取 3001 端口有的资源：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  getInfo = <span class="hljs-function">() =&gt;</span> &#123;<br>    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:3001/index.html&quot;</span>).<span class="hljs-title function_">then</span>(<br>      <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);<br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      &#125;<br>    );<br>  &#125;<br><br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.getInfo&#125;</span>&gt;</span>点击发送请求获取数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时控制台输出当前项目下的 <code>index.html</code> 文件：</p><left>  <img src="https://p.ipic.vip/vyhdeu.png" alt="image-20230207230919387" style="zoom: 33%;" /></left></li><li><p>获取 3001 端口没有而 3000 端口有的资源：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br><br>  getInfo = <span class="hljs-function">() =&gt;</span> &#123;<br>    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://localhost:3001/students&quot;</span>).<span class="hljs-title function_">then</span>(<br>      <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);<br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      &#125;<br>    );<br>  &#125;<br><br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.getInfo&#125;</span>&gt;</span>点击发送请求获取数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时控制台输出 3000 端口下的 <code>students</code> 数据：</p><left>  <img src="https://p.ipic.vip/hxjhru.png" alt="image-20230207231130393" style="zoom:50%;" /></left></li><li><p>若获取的资源 3001 端口和 3000 端口都没有，则控制台会报错。</p></li></ul><blockquote><p>方法一优缺点：</p><ul><li>优点：配置简单，前端请求资源时可以不加任何前缀</li><li>缺点：不能配置多个代理</li></ul></blockquote><h4 id="方法二：创建-setupProxy-js-文件"><a href="#方法二：创建-setupProxy-js-文件" class="headerlink" title="方法二：创建 setupProxy.js 文件"></a>方法二：创建 <code>setupProxy.js</code> 文件</h4><ol><li><p>首先在 src 目录下创建 <code>setupProxy.js</code> 文件</p></li><li><p>编写 <code>setupProxy.js</code> 配置具体代码规范：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 配置端口 8000 和端口 5001 的服务器代理</span><br><span class="hljs-comment">// setupProxy.js</span><br><br><span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>);<br><span class="hljs-comment">// 引入内置模块: HTTP 代理中间件</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">app</span>) &#123;<br>    <span class="hljs-comment">// app 为服务对象</span><br>    app.<span class="hljs-title function_">use</span>(<br>        <span class="hljs-title function_">createProxyMiddleware</span>(<span class="hljs-string">&#x27;/api1&#x27;</span>, &#123;<span class="hljs-comment">// 遇见 /api1 前缀的请求，就会触发该代理</span><br>            <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8000&#x27;</span>,<span class="hljs-comment">// 请求转发的端口地址</span><br>            <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">// 控制服务器收到响应头中 Host 字段的值</span><br>            <span class="hljs-attr">pathRewrite</span>: &#123;<br>                <span class="hljs-string">&#x27;^/api1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">// 去除请求前缀，保证交给后台服务器的是正常请求地址</span><br>            &#125;<br>        &#125;)<br>    );<br>    <br>    app.<span class="hljs-title function_">use</span>(<br>        <span class="hljs-title function_">createProxyMiddleware</span>(<span class="hljs-string">&#x27;/api2&#x27;</span>, &#123;<br>            <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5001&#x27;</span>,<br>            <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">pathRewrite</span>: &#123;<br>                <span class="hljs-string">&#x27;^/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>            &#125;<br>        &#125;)<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>http-proxy-middleware</code>  1.x 版本后配置代理使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>);<br></code></pre></td></tr></table></figure><p>此前使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proxy = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>);<br></code></pre></td></tr></table></figure></blockquote></li><li><p>向不同端口发送请求的方法：</p><ul><li><p>如果要向 8000 端口发送请求，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:3000/api1/teachers&#x27;</span>).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-comment">// ...</span><br>);<br></code></pre></td></tr></table></figure></li><li><p>如果要向 5001 端口发送请求，同理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:3000/api2/students&#x27;</span>).<span class="hljs-title function_">then</span>(<br><span class="hljs-comment">// ...</span><br>);<br></code></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>方法二优缺点：</p><ul><li>优点：可以配置多个代理，可以更加灵活地控制是否走代理请求</li><li>缺点：配置繁琐，前端发送代理请求时必须加前缀</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
